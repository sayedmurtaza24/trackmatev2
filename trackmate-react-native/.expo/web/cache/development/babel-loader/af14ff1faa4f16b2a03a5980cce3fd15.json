{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"name\", \"size\", \"color\", \"style\", \"children\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ensureNativeModuleAvailable from \"./ensure-native-module-available\";\nimport createIconSourceCache from \"./create-icon-source-cache\";\nimport createIconButtonComponent from \"./icon-button\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var NativeIconAPI = NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\nexport var DEFAULT_ICON_SIZE = 12;\nexport var DEFAULT_ICON_COLOR = 'black';\nexport default function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n  var fontReference = Platform.select({\n    windows: \"/Assets/\" + fontFile + \"#\" + fontFamily,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily\n  });\n  var IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n  var Icon = function (_PureComponent) {\n    _inherits(Icon, _PureComponent);\n    var _super = _createSuper(Icon);\n    function Icon() {\n      var _this;\n      _classCallCheck(this, Icon);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this.root = null;\n      _this.handleRef = function (ref) {\n        _this.root = ref;\n      };\n      return _this;\n    }\n    _createClass(Icon, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        if (this.root) {\n          this.root.setNativeProps(nativeProps);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n          name = _this$props.name,\n          size = _this$props.size,\n          color = _this$props.color,\n          style = _this$props.style,\n          children = _this$props.children,\n          props = _objectWithoutProperties(_this$props, _excluded);\n        var glyph = name ? glyphMap[name] || '?' : '';\n        if (typeof glyph === 'number') {\n          glyph = String.fromCodePoint(glyph);\n        }\n        var styleDefaults = {\n          fontSize: size,\n          color: color\n        };\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal'\n        };\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n        return _jsxs(Text, _objectSpread(_objectSpread({\n          selectable: false\n        }, props), {}, {\n          children: [glyph, children]\n        }));\n      }\n    }]);\n    return Icon;\n  }(PureComponent);\n  Icon.propTypes = {\n    allowFontScaling: PropTypes.bool,\n    name: IconNamePropType,\n    size: PropTypes.number,\n    color: PropTypes.any,\n    children: PropTypes.node,\n    style: PropTypes.any\n  };\n  Icon.defaultProps = {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  };\n  var imageSourceCache = createIconSourceCache();\n  function resolveGlyph(name) {\n    var glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n  function getImageSourceSync(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    ensureNativeModuleAvailable();\n    var glyph = resolveGlyph(name);\n    var processedColor = processColor(color);\n    var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      var imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);\n      var value = {\n        uri: imagePath,\n        scale: PixelRatio.get()\n      };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n  function getImageSource(_x) {\n    return _getImageSource.apply(this, arguments);\n  }\n  function _getImageSource() {\n    _getImageSource = _asyncToGenerator(function* (name) {\n      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n      ensureNativeModuleAvailable();\n      var glyph = resolveGlyph(name);\n      var processedColor = processColor(color);\n      var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n      if (imageSourceCache.has(cacheKey)) {\n        return imageSourceCache.get(cacheKey);\n      }\n      try {\n        var imagePath = yield NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor);\n        var value = {\n          uri: imagePath,\n          scale: PixelRatio.get()\n        };\n        imageSourceCache.setValue(cacheKey, value);\n        return value;\n      } catch (error) {\n        imageSourceCache.setError(cacheKey, error);\n        throw error;\n      }\n    });\n    return _getImageSource.apply(this, arguments);\n  }\n  function loadFont() {\n    return _loadFont.apply(this, arguments);\n  }\n  function _loadFont() {\n    _loadFont = _asyncToGenerator(function* () {\n      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n      if (Platform.OS === 'ios') {\n        ensureNativeModuleAvailable();\n        if (!file) {\n          throw new Error('Unable to load font, because no file was specified. ');\n        }\n        yield NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, _toConsumableArray(file.split('.')));\n      }\n    });\n    return _loadFont.apply(this, arguments);\n  }\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n  function getFontFamily() {\n    return fontReference;\n  }\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"names":["React","PureComponent","PropTypes","ensureNativeModuleAvailable","createIconSourceCache","createIconButtonComponent","NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","default","IconNamePropType","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","propTypes","allowFontScaling","bool","number","any","node","defaultProps","imageSourceCache","resolveGlyph","getImageSourceSync","processedColor","processColor","cacheKey","has","get","imagePath","getImageForFontSync","value","uri","scale","PixelRatio","setValue","error","setError","getImageSource","getImageForFont","loadFont","file","OS","Error","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button"],"sources":["C:/Users/marti/Desktop/projects/trackmatev2/trackmate-react-native/node_modules/react-native-vector-icons/lib/create-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text selectable={false} {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}